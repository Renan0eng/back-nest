// schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EnumUserType {
  ADMIN
  USUARIO
  PACIENTE
}

model User {
  idUser         String       @id @default(cuid())
  name           String
  avatar         String?
  email          String       @unique
  password       String
  cpf            String?      @unique
  cep            String?
  phone          String?
  user_id_create Int?
  user_id_update Int?
  user_id_delete Int?
  dt_delete      DateTime?
  created        DateTime     @default(now())
  updated        DateTime?    @updatedAt
  active         Boolean      @default(false)
  nivelAcessoId  Int          @default(1)
  nivel_acesso   Nivel_Acesso @relation(fields: [nivelAcessoId], references: [idNivelAcesso])
  type           EnumUserType @default(PACIENTE)

  formResponses Response[]

  @@index([idUser])
  @@index([user_id_create])
  @@index([user_id_update])
  @@index([user_id_delete])
}

model Nivel_Acesso {
  idNivelAcesso Int           @id @default(autoincrement())
  nome          String
  descricao     String?
  users         User[]
  menus         Menu_Acesso[]

  @@index([idNivelAcesso])
}

model Menu_Acesso {
  idMenuAcesso Int            @id @default(autoincrement())
  nome         String
  slug         String
  nivel_acesso Nivel_Acesso[]
  visualizar   Boolean        @default(false)
  criar        Boolean        @default(false)
  editar       Boolean        @default(false)
  excluir      Boolean        @default(false)
  relatorio    Boolean        @default(false)
}

enum QuestionType {
  MULTIPLE_CHOICE
  SHORT_TEXT
  PARAGRAPH
  CHECKBOXES
}

model Form {
  idForm          String     @id @default(uuid())
  title       String
  description String?
  questions   Question[]
  responses   Response[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Question {
  idQuestion       String       @id @default(uuid())
  text     String
  type     QuestionType
  required Boolean      @default(false)
  order    Int
  form     Form         @relation(fields: [formId], references: [idForm], onDelete: Cascade)
  formId   String
  options  Option[]
  answers  Answer[]
}

model Option {
  idOption         String   @id @default(uuid())
  text       String
  value    Int?
  order      Int
  question   Question @relation(fields: [questionId], references: [idQuestion], onDelete: Cascade)
  questionId String
}


model Response {
  idResponse          String   @id @default(uuid())
  submittedAt DateTime @default(now())

  form   Form   @relation(fields: [formId], references: [idForm], onDelete: Cascade)
  formId String

  user   User?   @relation(fields: [userId], references: [idUser], onDelete: SetNull)
  userId String?

  answers Answer[]

  @@index([formId])
  @@index([userId])
}

model Answer {
  idAnswer  String @id @default(uuid())

  value String?

  values String[]

  response   Response @relation(fields: [responseId], references: [idResponse], onDelete: Cascade)
  responseId String

  question   Question @relation(fields: [questionId], references: [idQuestion], onDelete: Cascade)
  questionId String

  @@index([responseId])
  @@index([questionId])
}
